import streamlit as st

from streamlit_option_menu import option_menu

from GradeHubPlusApp.handlers.common.cache import Menippe
from GradeHubPlusApp.handlers.common.types import (
    FormUI, 
    OptionUI, 
    PageUI, 
    AddEmailStates, 
    ChangeEmailStates, 
    ChangePasswordStates
)
from GradeHubPlusApp.handlers.h_notify import EmailNotificationH
from GradeHubPlusApp.handlers.h_profile import ProfileH


class ProfileUI:

    def __init__(self, username: str, full_name: str, role: str):
        self.s_username = username
        self.s_full_name = full_name
        self.s_role = role
        self.h_profile = ProfileH()
        self.h_email_notify = EmailNotificationH()
        self.menippe = Menippe()
    
    def setupUI(self) -> OptionUI:
        options = ('–ê–∫–∫–∞—É–Ω—Ç', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏')
        selector_mode = option_menu(
            menu_title=None, 
            icons=['person-lines-fill', 'gear-fill'], 
            orientation='horizontal', 
            options=options, 
            styles=None
        )

        if selector_mode == options[0]: self.__account_info()  # –∞–∫–∫–∞—É–Ω—Ç
        elif selector_mode == options[1]: self.__settings()  # –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

    def __account_info(self) -> PageUI:
        info = self.__get_needed_info()
        col_left, col_right = st.columns(2)

        with col_left:
            st.markdown('## :blue[–ò–º—è –∏ –§–∞–º–∏–ª–∏—è]:')
            st.markdown(f'### :red[{self.s_full_name}]')
            st.markdown('## :blue[–î–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞]:')
            st.markdown(f'### –°—Ç–∞—Ç—É—Å: :red[{info['role']}]')
            st.markdown(f'### –õ–æ–≥–∏–Ω: :red[{self.s_username}]')
            st.markdown(f'### –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: :red[{info['regDate']}]')

        with col_right:
            st.markdown('## :blue[–°–∏—Å—Ç–µ–º–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è]:')
            st.markdown(f'### –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {info['notifyStatus']}')
            st.markdown(f'### –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {info['notifyMode']}')
            if info['kword'] != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
                st.markdown(f'### {info['kword']}: :red[{info['link']}]')

    def __get_needed_info(self) -> dict[str, str]:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
        reg_date = self.h_profile.get_reg_date(self.s_username)
        notify_status = self.h_email_notify.get_notify_status(self.s_username)
        notify_mode = self.h_email_notify.get_notify_mode(self.s_username)
        link = self.h_email_notify.get_link(self.s_username)

        # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ st.markdown
        if self.s_role == 'Admin': role = '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä'
        elif self.s_role == 'Moderator': role = '–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å'
        else: role = '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
        
        if notify_status == 'Yes': notify_status = ':red[–í–∫–ª—é—á–µ–Ω–∞]'
        else: notify_status = ':orange[–í—ã–∫–ª—é—á–µ–Ω–∞]'

        if notify_mode == 'Email':
            kword = '–ü–æ—á—Ç–∞'
            notify_mode = f':red[{kword}]'
        elif notify_mode == 'Telegram':
            kword = '–¢–µ–ª–µ–≥—Ä–∞–º'
            notify_mode = f':red[{kword}]'
        else:
            kword = '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
            notify_mode = f':orange[{kword}]'

        if link == 'Undefined': link = ''

        return {
            'role': role, 
            'regDate': reg_date, 
            'notifyStatus': notify_status, 
            'notifyMode': notify_mode, 
            'link': link, 
            'kword': kword
        }

    def __settings(self) -> PageUI:
        # --- —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ ---
        with st.expander(':red[–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏]'):
            notify_mode = self.h_email_notify.get_notify_mode(self.s_username)

            # --- –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ ---
            if notify_mode == 'Undefined':
                self.__form_add_notify_mode()
            else:
                # --- —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
                notify = self.h_email_notify.get_notify_status(self.s_username)

                if notify == 'Yes':
                    switch_status = st.toggle(
                        '–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è?', value=True
                    )

                    if not switch_status:
                        self.h_email_notify.change_notify_status(self.s_username)
                else:
                    switch_status = st.toggle(
                        '–æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è?', value=False
                    )

                    if switch_status:
                        self.h_email_notify.change_notify_status(self.s_username)

                # --- –∏–∑–º–µ–Ω–µ–Ω–∏–µ ---
                if notify_mode == 'Email': self.__form_change_email_link()  # –ø–æ—á—Ç–∞
                # elif notify_mode == 'Telegram': self.__form_change_tg_link()  # —Ç–≥
        
        # --- –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è ---
        with st.expander(':red[–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è]'):
            self.__form_change_password()
        
        # --- –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ ---
        with st.expander(':red[–ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ]'):
            col_vault_size, _ = st.columns([0.3, 0.7])
            st.session_state['Cache-settings-vault_size'] = int(col_vault_size.selectbox(
                '–ö–∞–∫–æ–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ –∫—ç—à–∞ —Ö—Ä–∞–Ω–∏—Ç—å?', options=[*range(1, 16)], 
                index=[*range(1, 16)].index(st.session_state['Cache-settings-vault_size'])
            )) # type: ignore
            st.session_state['Cache-settings-optimization'] = st.toggle(
                '–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ?', value=st.session_state['Cache-settings-optimization']
            )

    def __form_add_notify_mode(self) -> FormUI:
        with st.form('Form_AddNotifyMode', clear_on_submit=True, border=False):
            anm_selected_mode = st.selectbox(
                '–í—ã–±–µ—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π', 
                options=('–ü–æ—á—Ç–∞', '–¢–µ–ª–µ–≥—Ä–∞–º')
            )
            anm_link = st.text_input(
                '–ö—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è?', max_chars=128, 
                placeholder='–ü–æ—á—Ç–∞: example@gmail.com | –¢–µ–ª–µ–≥—Ä–∞–º: @Username'
            ).strip()

            if st.form_submit_button('–î–æ–±–∞–≤–∏—Ç—å', type='primary'):
                if anm_selected_mode == '–ü–æ—á—Ç–∞' and anm_link != '':
                    output_msg = self.h_email_notify.add_email(
                        self.s_username, anm_link
                    )

                    if output_msg['state'] == AddEmailStates.SUCCESS:
                        st.success(output_msg['msg'], icon='‚úîÔ∏è')
                    elif output_msg['state'] == AddEmailStates.FAIL:
                        st.warning(output_msg['msg'], icon='‚ö†Ô∏è')
                elif anm_selected_mode == '–¢–µ–ª–µ–≥—Ä–∞–º':
                    st.error(
                        '–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ ' + 
                        '–¢–µ–ª–µ–≥—Ä–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å ' + 
                        '–¥—Ä—É–≥–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π.', icon='üòü'
                    )
                else: st.warning(
                    '–ß—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è, –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å ' + 
                    '–∫—É–¥–∞ –∏—Ö –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å.', icon='‚ö†Ô∏è'
                )

    def __form_change_email_link(self) -> FormUI:
        with st.form('Form_ChangeEmailLink', clear_on_submit=True, border=False):
            cel_old_link = st.text_input(
                '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—É—é –ø–æ—á—Ç—É', max_chars=128, 
                placeholder='–ú–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ "–ê–∫–∫–∞—É–Ω—Ç"'
            ).strip()
            cel_new_link = st.text_input(
                '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ—á—Ç—É', max_chars=128, 
                placeholder='–≠—Ç–∞ –ø–æ—á—Ç–∞ –∑–∞–º–µ–Ω–∏—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é'
            ).strip()
            cel_confirm_link = st.text_input(
                '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ—á—Ç—É –µ—â–µ —Ä–∞–∑', max_chars=128, 
                placeholder='–≠—Ç–∞ –∏ –Ω–æ–≤–∞—è –ø–æ—á—Ç–∞ –¥–æ–ª–∂–Ω—ã —Å–æ–≤–ø–∞–¥–∞—Ç—å'
            ).strip()

            if st.form_submit_button('–ò–∑–º–µ–Ω–∏—Ç—å', type='primary'):
                if cel_old_link != '' and cel_new_link != '':
                    if (
                        cel_new_link == cel_confirm_link and 
                        cel_new_link != cel_old_link
                    ):
                        output_msg = self.h_email_notify.change_email(
                            self.s_username, cel_old_link, cel_new_link
                        )

                        if output_msg['state'] == ChangeEmailStates.SUCCESS:
                            st.success(output_msg['msg'], icon='‚úîÔ∏è')
                        elif output_msg['state'] == ChangeEmailStates.FAIL:
                            st.warning(output_msg['msg'], icon='‚ö†Ô∏è')
                else: st.warning(
                    '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø–æ–ª—è.', icon='‚ö†Ô∏è'
                )

    def __form_change_password(self) -> FormUI:
        with st.form('Form_ChangePassword', clear_on_submit=True, border=False):
            cp_old_pw = st.text_input(
                '–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å', max_chars=32, type='password', 
                placeholder='–ù–µ –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º'
            )

            col_new_pw, col_confirm_pw = st.columns(2)
            cp_new_pw = col_new_pw.text_input(
                '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å', max_chars=32, type='password', 
                placeholder='–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å'
            )
            cp_confirm_pw = col_confirm_pw.text_input(
                '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å', max_chars=32, type='password', 
                placeholder='–î–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å –Ω–æ–≤—ã–º –ø–∞—Ä–æ–ª–µ–º'
            )

            if st.form_submit_button('–ò–∑–º–µ–Ω–∏—Ç—å', type='primary'):
                if cp_old_pw != '' and cp_new_pw != '':
                    if (
                        cp_new_pw == cp_confirm_pw and 
                        cp_new_pw != cp_old_pw
                    ):
                        output_msg = self.h_profile.change_password(
                            self.s_username, cp_old_pw, cp_new_pw
                        )

                        if output_msg['state'] == ChangePasswordStates.SUCCESS:
                            st.success(output_msg['msg'], icon='‚úîÔ∏è')
                        elif output_msg['state'] == ChangePasswordStates.FAIL:
                            st.warning(output_msg['msg'], icon='‚ö†Ô∏è')
                    else: st.warning('–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç.', icon='‚ö†Ô∏è')
                else: st.warning('–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø–æ–ª—è.', icon='‚ö†Ô∏è')
